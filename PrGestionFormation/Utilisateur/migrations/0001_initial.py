# Generated by Django 5.2.1 on 2025-06-19 18:58

import datetime
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('matricule', models.CharField(max_length=20, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur Système'), ('AGENT', 'Agent administratif'), ('ENSEIGNANT', 'Enseignant'), ('ETUDIANT', 'Étudiant'), ('PARENT', 'Parent')], max_length=20)),
                ('date_inscription', models.DateTimeField(auto_now_add=True)),
                ('date_nais', models.DateField(default=datetime.date(1990, 1, 1))),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('libelle', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('est_par_defaut', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
            },
        ),
        migrations.CreateModel(
            name='Specialite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdminSysteme',
            fields=[
                ('utilisateur', models.OneToOneField(limit_choices_to={'is_superuser': True, 'role': 'ADMIN'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('utilisateur', models.OneToOneField(limit_choices_to={'role': 'ETUDIANT'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FonctionAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Code unique de la fonction (ex: SECRETAIRE_ADMIN)', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(3)])),
                ('nom', models.CharField(help_text='Nom complet de la fonction (ex: Secrétaire administratif)', max_length=100)),
                ('description', models.TextField(help_text='Description détaillée du rôle et des missions')),
                ('responsabilites', models.JSONField(default=list, help_text='Liste des responsabilités principales')),
                ('controles', models.JSONField(default=list, help_text='Liste des mécanismes de contrôle associés')),
                ('protocoles', models.JSONField(default=list, help_text='Liste des protocoles et procédures spécifiques')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur Système'), ('AGENT', 'Agent administratif'), ('ENSEIGNANT', 'Enseignant'), ('ETUDIANT', 'Étudiant'), ('PARENT', 'Parent')], default='AGENT', editable=False, max_length=20)),
                ('permissions', models.ManyToManyField(blank=True, help_text='Permissions spécifiques à cette fonction', limit_choices_to={'codename__in': []}, related_name='fonctions_agent', to='auth.permission')),
            ],
            options={
                'verbose_name': "Fonction d'agent",
                'verbose_name_plural': "Fonctions d'agents",
                'ordering': ['nom'],
            },
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='genre',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Utilisateur.genre', verbose_name='Genre'),
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur'), ('AGENT', 'Agent administratif'), ('ENSEIGNANT', 'Enseignant'), ('ETUDIANT', 'Étudiant'), ('PARENT', 'Parent')], max_length=20, unique=True, verbose_name='Rôle système')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('groupe', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='AgentAdministration',
            fields=[
                ('utilisateur', models.OneToOneField(limit_choices_to={'role': 'AGENT'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('fonctions', models.ManyToManyField(to='Utilisateur.fonctionagent')),
            ],
        ),
        migrations.CreateModel(
            name='Enseignant',
            fields=[
                ('utilisateur', models.OneToOneField(limit_choices_to={'role': 'ENSEIGNANT'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('autres_specialites', models.CharField(blank=True, max_length=255)),
                ('specialites', models.ManyToManyField(blank=True, to='Utilisateur.specialite')),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('utilisateur', models.OneToOneField(limit_choices_to={'role': 'PARENT'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('enfants', models.ManyToManyField(related_name='parent', to='Utilisateur.etudiant')),
            ],
        ),
    ]
